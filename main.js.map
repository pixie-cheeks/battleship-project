{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship-project/./src/scripts/gameboard.js","webpack://battleship-project/./src/scripts/player.js","webpack://battleship-project/./src/scripts/ships.js","webpack://battleship-project/./src/scripts/manage-dom.js","webpack://battleship-project/./src/scripts/app.js"],"sourcesContent":["class Gameboard {\n  #board = new Array(10).fill(null).map(() => new Array(10).fill(null));\n  #alreadyShot = new Array(10).fill(null).map(() => new Array(10).fill(false));\n  #missedShots = [];\n  #hitShots = [];\n  #placedShips = [];\n  #totalShips = 0;\n  #sunkenShips = 0;\n\n  #setCell([x, y], value) {\n    this.#board[x][y] = value;\n  }\n\n  static #generateCoordinates(startCoordinate, shipLength, isVertical) {\n    const coordinates = [];\n    let incrementAxis;\n    let [x, y] = startCoordinate;\n\n    if (isVertical) {\n      incrementAxis = () => {\n        y += 1;\n      };\n    } else {\n      incrementAxis = () => {\n        x += 1;\n      };\n    }\n\n    for (let i = 0; i < shipLength; i++) {\n      coordinates.push([x, y]);\n      incrementAxis();\n    }\n\n    return coordinates;\n  }\n\n  getCell([x, y]) {\n    if (x < 0 || y < 0 || x > 9 || y > 9) {\n      throw new Error('Coordinate goes out of bounds');\n    }\n    return this.#board[x][y];\n  }\n\n  placeShip({ coordinate, ship, isVertical = false }) {\n    const shipParts = Gameboard.#generateCoordinates(\n      coordinate,\n      ship.getLength(),\n      isVertical,\n    );\n\n    shipParts.forEach((position) => {\n      if (this.getCell(position)) {\n        throw new Error(\"Ships can't overlap\");\n      }\n    });\n\n    shipParts.forEach((position) => this.#setCell(position, ship));\n    ship.isVertical = isVertical;\n    ship.coordinates = shipParts;\n    this.#placedShips.push(...shipParts);\n    this.#totalShips += 1;\n  }\n\n  receiveAttack(x, y) {\n    if (this.#alreadyShot[x][y]) throw new Error('This cell is already shot!');\n    this.#alreadyShot[x][y] = true;\n    const ship = this.getCell([x, y]);\n\n    if (!ship) {\n      this.#missedShots.push([x, y]);\n      return false;\n    }\n\n    ship.hit();\n    this.#hitShots.push([x, y]);\n    if (ship.isSunk()) this.#sunkenShips += 1;\n    return true;\n  }\n\n  deleteShip(coordinate) {\n    const ship = this.getCell(coordinate);\n    if (!ship) return null;\n    ship.coordinates.forEach((partPos) => this.#setCell(partPos, null));\n    return ship;\n  }\n\n  getMissedShots() {\n    return this.#missedShots;\n  }\n\n  getHitShots() {\n    return this.#hitShots;\n  }\n\n  getPlacedShips() {\n    return this.#placedShips;\n  }\n\n  areAllShipsSunk() {\n    return this.#sunkenShips >= this.#totalShips;\n  }\n}\n\nexport default Gameboard;\n","import Gameboard from './gameboard.js';\n\nclass Player {\n  #gameboard = new Gameboard();\n  #alreadyShot = new Array(10).fill(null).map(() => new Array(10).fill(false));\n  #shotCount = 0;\n\n  constructor(isComputer = false, name = null) {\n    const defaultName = isComputer ? 'Computer' : 'Player';\n    this.name = name || defaultName;\n    this.posessiveName =\n      this.name.charAt(this.name.length - 1).toLowerCase() === 's'\n        ? `${this.name}'`\n        : `${this.name}'s`;\n    this.isComputer = isComputer;\n  }\n\n  getBoard() {\n    return this.#gameboard;\n  }\n\n  static #getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  static #getRandomCoord() {\n    return [Player.#getRandomInt(0, 9), Player.#getRandomInt(0, 9)];\n  }\n\n  getAttackedCell(opponentBoard) {\n    if (this.#shotCount >= 100) return false;\n    const [x, y] = Player.#getRandomCoord();\n\n    if (this.#alreadyShot[x][y]) return this.getAttackedCell(opponentBoard);\n\n    this.#alreadyShot[x][y] = true;\n    this.#shotCount += 1;\n    return [x, y];\n  }\n}\nexport default Player;\n","class Ship {\n  #length = 0;\n  #timesHit = 0;\n\n  constructor(length) {\n    this.#length = length;\n  }\n\n  getLength() {\n    return this.#length;\n  }\n\n  getTimesHit() {\n    return this.#timesHit;\n  }\n\n  hit() {\n    this.#timesHit += 1;\n  }\n\n  isSunk() {\n    return this.#timesHit >= this.#length;\n  }\n}\n\nexport default Ship;\n","class ManageDOM {\n  #domCells = Array.from(document.querySelectorAll('.gameboard__cell'));\n  #domBoards = Array.from(document.querySelectorAll('.gameboard'));\n  #turnPlate = document.querySelector('.turn-plate');\n\n  constructor(player1, player2, isPVP) {\n    this.isPVP = isPVP;\n    this.players = [player1, player2];\n    this.activePlayer = player1;\n    this.inactivePlayer = player2;\n\n    this.init();\n  }\n\n  init() {\n    this.#domBoards.forEach((board, index) =>\n      this.bindAttackEvent(board, index),\n    );\n\n    this.render();\n  }\n\n  resetDOM() {\n    this.#domCells.forEach((cell) => {\n      cell.className = 'gameboard__cell';\n    });\n  }\n\n  render() {\n    this.resetDOM();\n    this.#turnPlate.textContent = `${this.activePlayer.posessiveName} turn`;\n    const firstGameboardOccupiedCells = this.players[0]\n      .getBoard()\n      .getPlacedShips();\n\n    firstGameboardOccupiedCells.forEach(([x, y]) => {\n      this.#domBoards[0]\n        .querySelector(`[data-index=\"${x}${y}\"`)\n        .classList.add('gameboard__cell--occupied');\n    });\n\n    this.players.forEach((player, i) => {\n      const gameboard = player.getBoard();\n\n      gameboard.getHitShots().forEach(([x, y]) => {\n        this.#domBoards[i]\n          .querySelector(`[data-index=\"${x}${y}\"]`)\n          .classList.add('gameboard__cell--hit');\n      });\n      gameboard.getMissedShots().forEach(([x, y]) => {\n        this.#domBoards[i]\n          .querySelector(`[data-index=\"${x}${y}\"]`)\n          .classList.add('gameboard__cell--miss');\n      });\n    });\n  }\n\n  bindAttackEvent(board, boardIndex) {\n    board.addEventListener('click', (e) => {\n      const cell = e.target;\n      if (!cell.classList.contains('gameboard__cell')) return;\n\n      const coordinate = cell.dataset.index.split('').map((el) => Number(el));\n      this.attackBoard(coordinate, this.players[boardIndex]);\n    });\n  }\n\n  switchActivePlayer() {\n    [this.activePlayer, this.inactivePlayer] = [\n      this.inactivePlayer,\n      this.activePlayer,\n    ];\n  }\n\n  attackBoard([x, y], player) {\n    let wasHit = false;\n    if (this.inactivePlayer !== player) return false;\n    try {\n      wasHit = this.inactivePlayer.getBoard().receiveAttack(x, y);\n    } catch (error) {\n      return false;\n    }\n\n    if (!wasHit) this.switchActivePlayer();\n    this.render();\n    if (this.inactivePlayer.getBoard().areAllShipsSunk()) return this.endGame();\n\n    if (!this.activePlayer.isComputer) return true;\n    setTimeout(() => {\n      this.attackBoard(\n        this.activePlayer.getAttackedCell(this.inactivePlayer.getBoard()),\n        this.inactivePlayer,\n      );\n    }, 400);\n\n    return true;\n  }\n\n  endGame() {\n    this.#turnPlate.textContent = `${this.activePlayer.name} won!`;\n    this.#domBoards.forEach((board) =>\n      board.replaceWith(board.cloneNode(true)),\n    );\n  }\n}\n\nexport default ManageDOM;\n","import Player from './player.js';\nimport Ship from './ships.js';\nimport ManageDOM from './manage-dom.js';\n\nconst turnPlate = document.querySelector('.turn-plate');\nconst getRandomInt = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst resetGame = () => {\n  document\n    .querySelectorAll('.gameboard')\n    .forEach((board) => board.replaceWith(board.cloneNode(true)));\n  turnPlate.textContent = '';\n};\n\nconst generateShipCoordinates = (shipLength, isVertical) => {\n  const startPoint = [getRandomInt(0, 9), getRandomInt(0, 9)];\n  const coordinates = [];\n\n  const incrIndex = isVertical ? 1 : 0;\n  function getFinalAxis([x, y], yAxis, length) {\n    if (yAxis) return y + length - 1;\n    return x + length - 1;\n  }\n  while (getFinalAxis(startPoint, isVertical, shipLength) > 9) {\n    startPoint[incrIndex] = getRandomInt(0, 9);\n  }\n  let incrementAxis;\n  let [x, y] = startPoint;\n\n  if (isVertical) {\n    incrementAxis = () => {\n      y += 1;\n    };\n  } else {\n    incrementAxis = () => {\n      x += 1;\n    };\n  }\n\n  for (let i = 0; i < shipLength; i++) {\n    coordinates.push([x, y]);\n    incrementAxis();\n  }\n\n  return coordinates;\n};\n\nconst getRandomStartPoints = (shipsData) => {\n  const isPlaced = new Array(10)\n    .fill(null)\n    .map(() => new Array(10).fill(false));\n  const coords = [];\n  shipsData.forEach(({ length, isVertical }) => {\n    let shipCoords = generateShipCoordinates(length, isVertical);\n    while (shipCoords.some(([x, y]) => isPlaced[x][y])) {\n      shipCoords = generateShipCoordinates(length, isVertical);\n    }\n\n    shipCoords.forEach(([x, y]) => {\n      isPlaced[x][y] = true;\n    });\n    coords.push(shipCoords[0]);\n  });\n\n  return coords;\n};\n\nconst getRandomPlayer = (isComputer = false) => {\n  const arrayTemplate = [1, 2, 3, 4, 5];\n  const ships = arrayTemplate.map((length) => new Ship(length));\n  const isVerticalArr = arrayTemplate.map(() => Boolean(getRandomInt(0, 1)));\n  const shipsData = arrayTemplate.map((length, index) => ({\n    length,\n    isVertical: isVerticalArr[index],\n  }));\n  const startPoints = getRandomStartPoints(shipsData);\n\n  const player = new Player(isComputer);\n\n  ships.forEach((ship, index) => {\n    player.getBoard().placeShip({\n      coordinate: startPoints[index],\n      ship,\n      isVertical: isVerticalArr[index],\n    });\n  });\n\n  return player;\n};\n\nconst enemyBoard = document.querySelector('.js-opponent-board').parentElement;\nconst placementControls = document.querySelector('.controls__placement');\nconst randomizeButton = document.querySelector('.placement__randomize');\nconst confirmButton = document.querySelector('.placement__confirm');\nconst resetButton = document.querySelector('.reset-game');\n\nconst initializeGame = () => {\n  resetGame();\n  turnPlate.style.display = 'none';\n  enemyBoard.style.display = 'none';\n  resetButton.style.display = 'none';\n  placementControls.style.display = '';\n  return new ManageDOM(getRandomPlayer(), getRandomPlayer(true));\n};\n\ninitializeGame();\n\nrandomizeButton.addEventListener('click', () => {\n  resetGame();\n  initializeGame();\n});\nconfirmButton.addEventListener('click', () => {\n  enemyBoard.style.display = '';\n  turnPlate.style.display = '';\n  placementControls.style.display = 'none';\n  resetButton.style.display = '';\n});\n\nresetButton.addEventListener('click', () => initializeGame());\n"],"names":["Gameboard","Array","fill","map","_ref","value","x","y","this","startCoordinate","shipLength","isVertical","coordinates","incrementAxis","i","push","getCell","_ref2","Error","placeShip","_ref3","coordinate","ship","shipParts","getLength","forEach","position","receiveAttack","hit","isSunk","deleteShip","partPos","getMissedShots","getHitShots","getPlacedShips","areAllShipsSunk","Player","constructor","isComputer","arguments","length","undefined","name","defaultName","posessiveName","charAt","toLowerCase","getBoard","min","max","Math","floor","random","getAttackedCell","opponentBoard","getTimesHit","from","document","querySelectorAll","querySelector","player1","player2","isPVP","players","activePlayer","inactivePlayer","init","board","index","bindAttackEvent","render","resetDOM","cell","className","textContent","classList","add","player","gameboard","boardIndex","addEventListener","e","target","contains","dataset","split","el","Number","attackBoard","switchActivePlayer","_ref4","wasHit","error","endGame","setTimeout","replaceWith","cloneNode","turnPlate","getRandomInt","resetGame","generateShipCoordinates","startPoint","incrIndex","getFinalAxis","yAxis","getRandomPlayer","arrayTemplate","ships","Ship","isVerticalArr","Boolean","startPoints","shipsData","isPlaced","coords","shipCoords","some","getRandomStartPoints","enemyBoard","parentElement","placementControls","randomizeButton","confirmButton","resetButton","initializeGame","style","display","ManageDOM"],"sourceRoot":""}